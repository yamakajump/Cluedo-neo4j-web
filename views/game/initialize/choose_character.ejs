<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Choisir un personnage</title>
    <link rel="stylesheet" href="/css/game.css">
</head>
<body>
    <div class="container">
        <h1>Choisir un personnage</h1>
        <p>Choisissez un personnage parmi ceux disponibles :</p>

        <!-- Conteneur pour les personnages disponibles -->
        <div id="availableProfs" class="characters-list">
            <!-- Les personnages disponibles seront injectés ici via JavaScript -->
        </div>

        <h2>Personnages déjà sélectionnés :</h2>
        <!-- Conteneur pour les personnages déjà sélectionnés -->
        <div id="selectedProfs" class="characters-list">
            <!-- Les personnages déjà sélectionnés seront injectés ici via JavaScript -->
        </div>
    </div>

    <script>
        const gameCode = '<%= gameCode %>';
        const playerId = '<%= playerId %>';

        // Fonction pour récupérer les personnages et mettre à jour l'affichage
        async function fetchCharacters() {
            try {
                // Appeler l'API pour obtenir les personnages disponibles et sélectionnés
                const response = await fetch(`/api/game/initialize/choose-character/${gameCode}`);
                const data = await response.json();

                // Récupérer les containers HTML
                const availableProfsContainer = document.getElementById('availableProfs');
                const selectedProfsContainer = document.getElementById('selectedProfs');

                // Vider les containers avant de les remplir
                availableProfsContainer.innerHTML = '';
                selectedProfsContainer.innerHTML = '';

                // Ajouter les personnages disponibles
                data.availableProfs.forEach(prof => {
                    const div = document.createElement('div');
                    div.className = 'character-card';
                    div.innerHTML = `
                        <img src="${prof.image}" alt="${prof.name}" onclick="chooseCharacter('${prof.name}')" style="cursor:pointer;">
                    `;
                    availableProfsContainer.appendChild(div);
                });

                // Ajouter les personnages sélectionnés
                data.selectedProfs.forEach(prof => {
                    const div = document.createElement('div');
                    div.className = 'character-card';
                    div.innerHTML = `
                        <img src="/images/profs/carte_${prof.name.toLowerCase()}.png" alt="${prof.name}">
                        <p>${prof.name} (Joueur : ${prof.playerId})</p>
                    `;
                    selectedProfsContainer.appendChild(div);
                });
            } catch (error) {
                console.error('Erreur lors de la récupération des personnages :', error);
            }
        }

        // Fonction pour choisir un personnage
        async function chooseCharacter(characterName) {
            try {
                const response = await fetch(`/game`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        gameCode,
                        playerId,
                        type: 'select-character',
                        characterName
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert('Personnage choisi avec succès !');
                    fetchCharacters();  // Rafraîchir les personnages après le choix
                } else {
                    alert('Erreur lors du choix du personnage : ' + result.message);
                }
            } catch (error) {
                console.error('Erreur lors du choix du personnage :', error);
            }
        }

        // Appeler la fonction pour charger les personnages au démarrage
        fetchCharacters();
    </script>
</body>
</html>
